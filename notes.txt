⭕ JS Tutorials

🛑 Javascript Introduction

✅ JavaScript Can Change HTML Content
    One of many JavaScript HTML methods is getElementById().

    The example below "finds" an HTML element (with id="demo"), and changes the element content (innerHTML) to "Hello JavaScript":

    Example:

    document.getElementById("demo").innerHTML = "Hello JavaScript";

✅ JavaScript Can Change HTML Attribute Values

✅ JavaScript Can Change HTML Styles (CSS).

✅ JavaScript Can Hide HTML Elements

    Hiding HTML elements can be done by changing the display style:

    Example
    document.getElementById("demo").style.display = "none";

✅ JavaScript Can Show HTML Elements

    Showing hidden HTML elements can also be done by changing the display style:

    Example
    document.getElementById("demo").style.display = "block";

🛑 Where to write

1. <script>
2. <head>/<body>
3. extrenal file

    JavaScript files have the file extension .js.
    
    Example:
    <script src="myScript.js"></script>

✅ JavaScript Functions and Events

    A JavaScript function is a block of JavaScript code, that can be executed when "called" for.

🛑 JS Output

✅ JavaScript Display Possibilities

    JavaScript can "display" data in different ways:

    1.Writing into an HTML element, using innerHTML.
    2.Writing into the HTML output using document.write().
    3.Writing into an alert box, using window.alert().
    4.Writing into the browser console, using console.log() 

✅ Using document.write() after an HTML document is loaded, will delete all existing HTML

✅ The document.write() method should only be used for testing.

✅ For debugging purposes, you can call the console.log() method in the browser to display data. 

✅ The only exception is that you can call the window.print() method in the browser to print the content of the current window.

🛑 JS Statememts

✅ Semicolons ;

    Semicolons separate JavaScript statements.

    Add a semicolon at the end of each executable statement:

    Examples
    let a, b, c;  // Declare 3 variables
    a = 5;        // Assign the value 5 to a
    b = 6;        // Assign the value 6 to b
    c = a + b;    // Assign the sum of a and b to c

✅ JavaScript Line Length and Line Breaks

    For best readability, programmers often like to avoid code lines longer than 80 characters.

    If a JavaScript statement does not fit on one line, the best place to break it is after an operator:

    Example
    document.getElementById("demo").innerHTML =
    "Hello Dolly!";

✅ JavaScript Keywords

    JavaScript statements often start with a keyword to identify the JavaScript action to be performed.

    Our Reserved Words Reference lists all JavaScript keywords.

    Here is a list of some of the keywords you will learn about in this tutorial:

    Keyword         Description
    
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

    var	            Declares a variable
    let	            Declares a block variable
    const	        Declares a block constant
    if	            Marks a block of statements to be executed on a condition
    switch	        Marks a block of statements to be executed in different cases
    for	            Marks a block of statements to be executed in a loop
    function	    Declares a function
    return	        Exits a function
    try	            Implements error handling to a block of statements

🛑 JS Syntax

✅ JavaScript Identifiers / Names
✅ JavaScript is Case Sensitive
✅ JavaScript and Camel Case

🛑 JS Comments

✅ //
✅ /* */

🛑 JS Variables

✅ 4 Ways to Declare a JavaScript Variable:

    var
    let
    const
    Using nothing

🛑 JS Let

✅ Variables defined with let can not be redeclared.

✅ These two keywords provide Block Scope in JavaScript.

    Variables declared inside a { } block cannot be accessed from outside the block:

    Example:

        {
        let x = 2;
        }
        // x can NOT be used here

✅ Let Hoisting

    Variables defined with var are hoisted to the top and can be initialized at any time.

    Meaning: You can use the variable before it is declared:

    Example

        carName = "Volvo";
        var carName;

🛑 JS Const

✅ Block Scope

    Declaring a variable with const is similar to let when it comes to Block Scope.

    The x declared in the block, in this example, is not the same as the x declared outside the block:

    Example

        const x = 10;
        // Here x is 10

        {
        const x = 2;
        // Here x is 2
        }

        // Here x is 10

🛑 JS Operator

✅ Arithmatic + - * / %  ** -- ++  
✅ Assignment = += -= *= /= %= **=
✅ Comparison == === != !== > <  >= <= ?
✅ Logical && || !
✅ Type typeof instanceof
✅ Bitwise & | ~ ^ << >> >>>

🛑 JS Arithmatic

🛑 JS Assignment

🛑 JS Data Types

✅ JavaScript has 8 Datatypes

    1. String
    2. Number
    3. Bigint
    4. Boolean
    5. Undefined
    6. Null
    7. Symbol
    8. Object

✅ The Object Datatype

    The object data type can contain:

    1. An object
    2. An array
    3. A date

🛑 JS Functions

✅ A JavaScript function is defined with the function keyword, followed by a name, followed by parentheses ().

    Function names can contain letters, digits, underscores, and dollar signs (same rules as variables).

    The parentheses may include parameter names separated by commas:
        
                (parameter1, parameter2, ...)

    The code to be executed, by the function, is placed inside curly brackets: {}

                                function name(parameter1, parameter2, parameter3) {
                                // code to be executed
                                }

    Function parameters are listed inside the parentheses () in the function definition.

    Function arguments are the values received by the function when it is invoked.

    Inside the function, the arguments (the parameters) behave as local variables.

🛑 JS Objects

✅ Real Life Objects, Properties, and Methods:

    In real life, a car is an object.

    A car has properties like weight and color, and methods like start and stop

    All cars have the same properties, but the property values differ from car to car.

    All cars have the same methods, but the methods are performed at different times.

    Example:

                                const person = {
                                firstName: "John",
                                lastName: "Doe",
                                age: 50,
                                eyeColor: "blue"
                                };

✅  const person = {
        firstName: "John",
        lastName : "Doe",
        id       : 5566,
        fullName : function() {
            return this.firstName + " " + this.lastName;
        }
        };

✅  What is this?

    In JavaScript, the this keyword refers to an object.

    Which object depends on how this is being invoked (used or called).

    The this keyword refers to different objects depending on how it is used:

        In an object method, this refers to the object.
        Alone, this refers to the global object.
        In a function, this refers to the global object.
        In a function, in strict mode, this is undefined.
        In an event, this refers to the element that received the event.
        Methods like call(), apply(), and bind() can refer this to any object.
        Note
        this is not a variable. It is a keyword. You cannot change the value of this.

🛑 JS Events

✅ Example:
                    <button onclick="document.getElementById('demo').innerHTML = Date()">The time is?</button>

✅ Common HTML Events
        
    Here is a list of some common HTML events:

        Event	            Description
        +---------------------------------------------------------------------+
        
        onchange	        An HTML element has been changed
        onclick	            The user clicks an HTML element
        onmouseover	        The user moves the mouse over an HTML element
        onmouseout	        The user moves the mouse away from an HTML element
        onkeydown	        The user pushes a keyboard key
        onload	            The browser has finished loading the page

🛑 JS Strings

✅ To find the length of a string, use the built-in length property 

✅ Escape Character

    Because strings must be written within quotes, JavaScript will misunderstand this string:

    The backslash (\) escape character turns special characters into string characters:

    Code	    Result	        Description
    ------------------------------------------

    \'	        '	            Single quote
    \"	        "	            Double quote
    \\	        \	            Backslash

✅ Six other escape sequences are valid in JavaScript:

    Code	    Result
    -------------------------------

    \b	        Backspace
    \f	        Form Feed
    \n	        New Line
    \r	        Carriage Return
    \t	        Horizontal Tabulator
    \v	        Vertical Tabulator

✅ Comparing two JavaScript objects always returns false.

🛑 JS Strings Methods

✅      String length
        String slice()
        String substring()
        String substr()
        String replace()
        String replaceAll()
        String toUpperCase()
        String toLowerCase()
        String concat()
        String trim()
        String trimStart()
        String trimEnd()
        String padStart()
        String padEnd()
        String charAt()
        String charCodeAt()
        String split()

✅      slice(start, end)
        substring(start, end)
        substr(start, length)
        replace("Microsoft", "W3Schools")

✅ The trim() method removes whitespace from both sides of a string

    trimStart()
    trim()
    trimEnd()

✅ padStart() and padEnd() to support padding at the beginning and at the end of a string

    Example:

        padStart(4,"0")
        padEnd(4,"0")

✅ Extracting String Characters

    There are 3 methods for extracting string characters:

        charAt(position)
        charCodeAt(position) : The charCodeAt() method returns the unicode of the character at a specified index in a string
        Property access [ ]

✅ A string can be converted to an array with the split() method

🛑 JS Strings Search

✅ JavaScript Search Methods

                    String indexOf() : The indexOf() method returns the index of (position of) the first occurrence of a string in a string
                    String lastIndexOf() : The lastIndexOf() method returns the index of the last occurrence of a specified text in a string
                    String search() : The search() method searches a string for a string (or a regular expression) and returns the position of the match
                    String match() : The match() method returns an array containing the results of matching a string against a string (or a regular expression).
                    String matchAll() : The matchAll() method returns an iterator containing the results of matching a string against a string (or a regular expression).
                    String includes() : The includes() method returns true if a string contains a specified value.
                    String startsWith() : The startsWith() method returns true if a string begins with a specified value.
                    String endsWith() : The endsWith() method returns true if a string ends with a specified value.

🛑 JS String Templates

✅ ${ans}

🛑 JS Numbers   

✅ JavaScript has only one type of number. Numbers can be written with or without decimals.

✅ Integers (numbers without a period or exponent notation) are accurate up to 15 digits.

✅ Infinity (or -Infinity) is the value JavaScript will return if you calculate a number outside the largest possible number.

✅ JavaScript interprets numeric constants as hexadecimal if they are preceded by 0x.

🛑 JS BigInt

✅ BigInt is the second numeric data type in JavaScript (after Number).

    With BigInt the total number of supported data types in JavaScript is 8:

        1. String
        2. Number
        3. Bigint
        4. Boolean
        5. Undefined
        6. Null
        7. Symbol
        8. Object

✅ The Number.isInteger() method returns true if the argument is an integer.

✅ A safe integer is an integer that can be exactly represented as a double precision number.
    
    The Number.isSafeInteger() method returns true if the argument is a safe integer.

🛑 JS Number Methods

✅  

    Method	            |    Description
+-----------------------|---------------------------------------------------------+
    toString()	        |    Returns a number as a string
    toExponential()	    |    Returns a number written in exponential notation
    toFixed()	        |    Returns a number written with a number of decimals
    toPrecision()	    |    Returns a number written with a specified length
    ValueOf()	        |    Returns a number as a number

✅  A safe integer is an integer that can be exactly represented as a double precision number.

    The Number.isSafeInteger() method returns true if the argument is a safe integer.

🛑 JS Number Properties

✅

Property	            Description
+----------------------------------------------------------------------------------------+
EPSILON	                The difference between 1 and the smallest number > 1.
MAX_VALUE	            The largest number possible in JavaScript
MIN_VALUE	            The smallest number possible in JavaScript
MAX_SAFE_INTEGER	    The maximum safe integer (253 - 1)
MIN_SAFE_INTEGER	    The minimum safe integer -(253 - 1)
POSITIVE_INFINITY	    Infinity (returned on overflow)
NEGATIVE_INFINITY	    Negative infinity (returned on overflow)
NaN	                    A "Not-a-Number" value

🛑 JS Arrays

✅ An array is a special variable, which can hold more than one value:

            const cars = ["Saab", "Volvo", "BMW"];

✅ It is a common practice to declare arrays with the const keyword.

✅ const cars = new Array("Saab", "Volvo", "BMW");

✅ Array Methods

    1. length
    2. sort

✅ The Difference Between Arrays and Objects

            In JavaScript, arrays use numbered indexes.  

            In JavaScript, objects use named indexes.

✅ Array.isArray()

✅ instanceof

🛑 JavaScript Array Methods

✅ The JavaScript method toString() converts an array to a string of (comma separated) array values.

✅ pop()

✅ push()

✅ The shift() method removes the first array element and "shifts" all other elements to a lower index.

✅ The unshift() method adds a new element to an array (at the beginning), and "unshifts" older elements

    The unshift() method returns the new array length

✅ Using delete leaves undefined holes in the array.

✅ The concat() method creates a new array by merging (concatenating) existing arrays

    The concat() method can also take strings as arguments

✅ Flattening an array is the process of reducing the dimensionality of an array.

    The flat() method creates a new array with sub-array elements concatenated to a specified depth.

✅ The splice() method adds new items to an array.

    The slice() method slices out a piece of an array.

✅ The splice() method can be used to add new items to an array:

            Example:

            const fruits = ["Banana", "Orange", "Apple", "Mango"];
            fruits.splice(2, 0, "Lemon", "Kiwi");
        
                            The first parameter (2) defines the position where new elements should be added (spliced in).

                            The second parameter (0) defines how many elements should be removed.

                            The rest of the parameters ("Lemon" , "Kiwi") define the new elements to be added.

                            The splice() method returns an array with the deleted items.

🛑 JS Array Sort

✅ The sort() method sorts an array alphabetically 

✅ The reverse() method reverses the elements in an array.

🛑 JS Array Iteration   

✅ The forEach() method calls a function (a callback function) once for each array element.

✅ JavaScript Array map()

        The map() method creates a new array by performing a function on each array element.

        The map() method does not execute the function for array elements without values.

        The map() method does not change the original array.

✅ JavaScript Array flatMap()

        ES2019 added the Array flatMap() method to JavaScript.

        The flatMap() method first maps all elements of an array and then creates a new array by flattening the array.

        Example:

            const myArr = [1, 2, 3, 4, 5, 6];
            const newArr = myArr.flatMap((x) => x * 2);

✅ The filter() method creates a new array with array elements that pass a test.

✅ JavaScript Array reduce()

        The reduce() method runs a function on each array element to produce (reduce it to) a single value.

        The reduce() method works from left-to-right in the array. See also reduceRight().

        The reduce() method does not reduce the original array.

        This example finds the sum of all numbers in an array:

        Example:

                    const numbers = [45, 4, 9, 16, 25];
                    let sum = numbers.reduce(myFunction);

                    function myFunction(total, value, index, array) {
                    return total + value;
                    }

✅ JavaScript Array every()
    
    The every() method checks if all array values pass a test.

✅ JavaScript Array some()

    The some() method checks if some array values pass a test.

    This example checks if some array values are larger than 18

✅ JavaScript Array indexOf()

    The indexOf() method searches an array for an element value and returns its position.

    array.indexOf(item, start)

✅ The find() method returns the value of the first array element that passes a test function.

✅ The findIndex() method returns the index of the first array element that passes a test function.

✅ The Array.keys() method returns an Array Iterator object with the keys of an array.

✅ The entries() method returns an Array Iterator object with key/value pairs:

        [0, "Banana"]
        [1, "Orange"]
        [2, "Apple"]
        [3, "Mango"]

        The entries() method does not change the original array.

✅ Array.includes() to arrays. This allows us to check if an element is present in an array (including NaN, unlike indexOf).

🛑 JS Array Const   

✅ An array declared with const cannot be reassigned

🛑 JS Date

✅ There are 9 ways to create a new date object:

    new Date()
    new Date(date string)

    new Date(year,month)
    new Date(year,month,day)
    new Date(year,month,day,hours)
    new Date(year,month,day,hours,minutes)
    new Date(year,month,day,hours,minutes,seconds)
    new Date(year,month,day,hours,minutes,seconds,ms)

    new Date(milliseconds)

🛑 JS Date Formats


🛑 JS Date Get Methods

✅  Method	                               Description
    +-------------------------------------------------------------------------------+
    getFullYear()	            Get year as a four digit number (yyyy)
    getMonth()	                Get month as a number (0-11)
    getDate()	                Get day as a number (1-31)
    getDay()	                Get weekday as a number (0-6)
    getHours()	                Get hour (0-23)
    getMinutes()	            Get minute (0-59)
    getSeconds()	            Get second (0-59)
    getMilliseconds()	        Get millisecond (0-999)
    getTime()	                Get time (milliseconds since January 1, 1970)

🛑 JS Date Set Methods

✅ Method	                                    Description
    +---------------------------------------------------------------------------------------+
    setDate()	                    Set the day as a number (1-31)
    setFullYear()	                Set the year (optionally month and day)
    setHours()	                    Set the hour (0-23)
    setMilliseconds()	            Set the milliseconds (0-999)
    setMinutes()	                Set the minutes (0-59)
    setMonth()	                    Set the month (0-11)
    setSeconds()	                Set the seconds (0-59)
    setTime()	                    Set the time (milliseconds since January 1, 1970)

🛑 JS Math

✅ 

    Math.E        // returns Euler's number
    Math.PI       // returns PI
    Math.SQRT2    // returns the square root of 2
    Math.SQRT1_2  // returns the square root of 1/2
    Math.LN2      // returns the natural logarithm of 2
    Math.LN10     // returns the natural logarithm of 10
    Math.LOG2E    // returns base 2 logarithm of E
    Math.LOG10E   // returns base 10 logarithm of E

✅

    Math.round(x)	Returns x rounded to its nearest integer
    Math.ceil(x)	Returns x rounded up to its nearest integer
    Math.floor(x)	Returns x rounded down to its nearest integer
    Math.trunc(x)	Returns the integer part of x (new in ES6)

✅ Math.sign(x) returns if x is negative, null or positive

✅ Math.pow(x, y) returns the value of x to the power of y

✅ Math.random() returns a random number between 0 (inclusive), and 1 (exclusive)

✅   Method	                        Description
    +------------------------------------------------------------------------------------------------------+
    abs(x)	            Returns the absolute value of x
    acos(x)	            Returns the arccosine of x, in radians
    acosh(x)	        Returns the hyperbolic arccosine of x
    asin(x)	            Returns the arcsine of x, in radians
    asinh(x)	        Returns the hyperbolic arcsine of x
    atan(x)	            Returns the arctangent of x as a numeric value between -PI/2 and PI/2 radians
    atan2(y, x)	        Returns the arctangent of the quotient of its arguments
    atanh(x)	        Returns the hyperbolic arctangent of x
    cbrt(x)	            Returns the cubic root of x
    ceil(x)	            Returns x, rounded upwards to the nearest integer
    cos(x)	            Returns the cosine of x (x is in radians)
    cosh(x)	            Returns the hyperbolic cosine of x
    exp(x)	            Returns the value of Ex
    floor(x)	        Returns x, rounded downwards to the nearest integer
    log(x)	                    Returns the natural logarithm (base E) of x
    max(x, y, z, ..., n)	    Returns the number with the highest value
    min(x, y, z, ..., n)	    Returns the number with the lowest value
    pow(x, y)	                Returns the value of x to the power of y
    random()	                Returns a random number between 0 and 1
    round(x)	                Rounds x to the nearest integer
    sign(x)	                    Returns if x is negative, null or positive (-1, 0, 1)
    sin(x)	                    Returns the sine of x (x is in radians)
    sinh(x)	                    Returns the hyperbolic sine of x
    sqrt(x)	                    Returns the square root of x
    tan(x)	                    Returns the tangent of an angle
    tanh(x)	                    Returns the hyperbolic tangent of a number
    trunc(x)	                Returns the integer part of a number (x)

🛑 JS Random

🛑 JS Booleans

🛑 JS Comparisions

🛑 JS If Else

    if (condition1) {
    //  block of code to be executed if condition1 is true
    } else if (condition2) {
    //  block of code to be executed if the condition1 is false and condition2 is true
    } else {
    //  block of code to be executed if the condition1 is false and condition2 is false
    }

🛑 JS Switch

    switch(expression) {
    case x:
        // code block
        break;
    case y:
        // code block
        break;
    default:
        // code block
    }

🛑 JS Loop For

    for (let i = 0; i < 5; i++) {
        text += "The number is " + i + "<br>";
    }

🛑 JS For In

✅  for (key in object) {
            // code block to be executed
    }

✅ The forEach() method calls a function (a callback function) once for each array element.

🛑 JS For Of

✅ The JavaScript for of statement loops through the values of an iterable object.

✅          for (variable of iterable) {
                // code block to be executed
            }

🛑 JS Loop While

✅ while (condition) {
    // code block to be executed
    }

✅ do {
    // code block to be executed
    }
    while (condition);

🛑 JS Break

✅ The break statement "jumps out" of a loop.

✅ The continue statement breaks one iteration (in the loop), if a specified condition occurs, and continues with the next iteration in the loop.

🛑 JS Iterables

✅  Iterables are iterable objects (like Arrays).

    Iterables can be accessed with simple and efficient code.

    Iterables can be iterated over with for..of loops

🛑 JS Set

✅
    Method	            Description

    +-------------------------------------------------------------------------------------+
    new Set()	        Creates a new Set
    add()	            Adds a new element to the Set
    delete()	        Removes an element from a Set
    has()	            Returns true if a value exists in the Set
    forEach()	        Invokes a callback for each element in the Set
    values()	        Returns an iterator with all the values in a Set

✅
    Property	        Description
    +---------------------------------------------------------------------+
    size	            Returns the number of elements in a Set

🛑 JS Maps

✅  Method                  Description
    +-------------------------------------------------------------------------------------+
    new Map()	            Creates a new Map
    set()	                Sets the value for a key in a Map
    get()	                Gets the value for a key in a Map
    delete()	            Removes a Map element specified by the key
    has()	                Returns true if a key exists in a Map
    forEach()	            Calls a function for each key/value pair in a Map
    entries()	            Returns an iterator with the [key, value] pairs in a Map
    
✅    
    Property	            Description
    +--------------------------------------------------------------------+
    size	                Returns the number of elements in a Map

🛑 JS typeof

🛑 JS Type Conversion

✅
    Method	                    Description
    +-------------------------------------------------------------------------+
    
    Number()	                Returns a number, converted from its argument
    parseFloat()	            Parses a string and returns a floating point number
    parseInt()	                Parses a string and returns an integer
    toExponential()	            Returns a string, with a number rounded and written using exponential notation.
    toFixed()	                Returns a string, with a number rounded and written with a specified number of decimals.
    toPrecision()	            Returns a string, with a number written with a specified length

🛑 JS Bitwise

✅
    Operator	        Name	                            Description
    +-------------------------------------------------------------------------------------------------------------------------------------------------------------+

    &	                AND	                                Sets each bit to 1 if both bits are 1
    |	                OR	                                Sets each bit to 1 if one of two bits is 1
    ^	                XOR	                                Sets each bit to 1 if only one of two bits is 1
    ~	                NOT	                                Inverts all the bits
    <<	                Zero fill left shift	            Shifts left by pushing zeros in from the right and let the leftmost bits fall off
    >>	                Signed right shift	                Shifts right by pushing copies of the leftmost bit in from the left, and let the rightmost bits fall off
    >>>	                Zero fill right shift	            Shifts right by pushing zeros in from the left, and let the rightmost bits fall off

🛑 JS RegExp

🛑 JS Precedence

🛑 JS Error

✅  try {
            adddlert("Welcome guest!");
    }
    catch(err) {
            document.getElementById("demo").innerHTML = err.message;
    }

✅  throw "Too big";

✅ 
    try {
    Block of code to try
    }
    catch(err) {
    Block of code to handle errors
    }
    finally {
    Block of code to be executed regardless of the try / catch result
    }

🛑 JS Scope

🛑 JS Hoisting

🛑 JS Strict Mode

🛑 JS this Keyword

🛑 JS Arrow Function

✅  let myFunction = (a, b) => a * b;

✅  hello = () => {
        return "Hello World!";
    }

✅  hello = () => "Hello World!";   
    
✅  hello = (val) => "Hello " + val;



🛑 JS Class

✅  class ClassName {
        constructor() { ... }
        method_1() { ... }
        method_2() { ... }
        method_3() { ... }
    }

🛑 JS JSON

✅  "employees":[
        {"firstName":"John", "lastName":"Doe"},
        {"firstName":"Anna", "lastName":"Smith"},
        {"firstName":"Peter", "lastName":"Jones"}
    ]

🛑 JS Debugging

🛑 JS Style Guide

🛑 JS Best Practices

🛑 JS Mistakes

🛑 JS Performance

✅ Reduce DOM Access
        
        Accessing the HTML DOM is very slow, compared to other JavaScript statements.

        If you expect to access a DOM element several times, access it once, and use it as a local variable:

                                Example:

                                const obj = document.getElementById("demo");
                                obj.innerHTML = "Hello";

🛑 JS Reserved Words

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

⭕ JS Versions

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

⭕ JS Objects

🛑 Object Definition

✅ Methods are actions that can be performed on objects.

✅ The named values, in JavaScript objects, are called properties.

🛑 Object Ppt:

✅  objectName.property  
    objectName["property"] 
    objectName[expression]   

✅ delete person.age; // for deleting

✅ person.nationality = "English"; // to add properties

🛑 Object Methods:

✅ const person = {
        firstName: "John",
        lastName: "Doe",
        id: 5566,
        fullName: function() {
            return this.firstName + " " + this.lastName;
        }
    };

🛑 Object Display:

✅ Object.values(person);

✅ JSON.stringify(person)
    
    O/p: {"name":"John","age":30,"city":"New York"}

✅ JSON.stringify will not stringify functions

🛑 Object Accessors:

✅ Object.defineProperty(obj, "reset", {
        get : function () {this.counter = 0;}
    });

🛑 Object Constructor:

✅ function Person(first, last, age, eye) {
        this.firstName = first;
        this.lastName = last;
        this.age = age;
        this.eyeColor = eye;
    } 

🛑 Object Prototype:

✅ The JavaScript prototype property also allows you to add new methods to objects constructors

    Example:

    Person.prototype.name = function() {
        return this.firstName + " " + this.lastName;
    };

🛑 Object Iterables:

✅ The Symbol.iterator is a function that returns a next() function.

✅ The iterator protocol defines how to produce a sequence of values from an object.

✅ An object becomes an iterator when it implements a next() method.

✅ The next() method must return an object with two properties:

                    value (the next value)
                    done (true or false)

🛑 Object Sets:

✅ The entries() Method:

    A Set has no keys.

    entries() returns [value,value] pairs instead of [key,value] pairs. 

🛑 Object Maps:

✅ A Map holds key-value pairs where the keys can be any datatype.

✅ A Map remembers the original insertion order of the keys.

✅ A Map has a property that represents the size of the map. 

✅ const fruits = new Map();

✅ The get() method gets the value of a key in a Map

🛑 Object Reference

✅

    // Create object with an existing object as prototype
    Object.create()

    // Adding or changing an object property
    Object.defineProperty(object, property, descriptor)

    // Adding or changing object properties
    Object.defineProperties(object, descriptors)

    // Accessing Properties
    Object.getOwnPropertyDescriptor(object, property)

    // Returns all properties as an array
    Object.getOwnPropertyNames(object)

    // Accessing the prototype
    Object.getPrototypeOf(object)

    // Returns enumerable properties as an array
    Object.keys(object)

✅ 

    // Prevents adding properties to an object
    Object.preventExtensions(object)

    // Returns true if properties can be added to an object
    Object.isExtensible(object)

    // Prevents changes of object properties (not values)
    Object.seal(object)

    // Returns true if object is sealed
    Object.isSealed(object)

    // Prevents any changes to an object
    Object.freeze(object)

    // Returns true if object is frozen
    Object.isFrozen(object)

✅ For changing the value

    Object.defineProperty(object, property, {value : value})

✅ For changing meta data

    writable : true      // Property value can be changed
    enumerable : true    // Property can be enumerated
    configurable : true  // Property can be reconfigured

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

⭕ JS Functions

🛑 Func Definition

✅  function functionName(parameters) {
        // code to be executed
    }

✅ const x = function (a, b) {return a * b};

✅ const myFunction = new Function("a", "b", "return a * b");
    
    let x = myFunction(4, 3);

✅ A self-invoking expression is invoked (started) automatically, without being called.

    Function expressions will execute automatically if the expression is followed by ().

    You cannot self-invoke a function declaration.

    You have to add parentheses around the function to indicate that it is a function expression:

        Example:

                (function () {
                let x = "Hello!!";  // I will invoke myself
                })();

🛑 Func Parameters

✅ The rest parameter (...) allows a function to treat an indefinite number of arguments as an array

✅ x = findMax(1, 123, 500, 115, 44, 88);

    function findMax() {
    let max = -Infinity;
        for (let i = 0; i < arguments.length; i++) 
        {
            if (arguments[i] > max) 
            {
                max = arguments[i];
            }
        }
        return max;
    } 

🛑 Func Invocation

✅ It is common to use the term "call a function" instead of "invoke a function".

🛑 Func Call

✅ With the call() method, you can write a method that can be used on different objects.

🛑 Func Apply

✅ The call() method takes arguments separately.

    The apply() method takes arguments as an array. 

🛑 Func Bind

✅ With the bind() method, an object can borrow a method from another object.

✅ const person = {
        firstName:"John",
        lastName: "Doe",
        fullName: function () {
            return this.firstName + " " + this.lastName;
        }
    }

    const member = {
    firstName:"Hege",
    lastName: "Nilsen",
    }

    let fullName = person.fullName.bind(member);

🛑 Func Closures

✅ JavaScript variables can belong to the local or global scope.

    Global variables can be made local (private) with closures.

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


⭕ JS Classes

🛑 Class Intro

✅ class ClassName {
        constructor() { ... }
    }

✅ class ClassName {
        constructor() { ... }
        
        method_1() { ... }
        method_2() { ... }
        method_3() { ... }
    }

🛑 Class Inheritance

✅ To create a class inheritance, use the extends keyword.

✅ A class created with a class inheritance inherits all the methods from another class

✅ class Car {
        constructor(brand) {
            this.carname = brand;
        }
        present() {
            return 'I have a ' + this.carname;
        }
    }

    class Model extends Car {
        constructor(brand, mod) {
            super(brand);
            this.model = mod;
        }
        show() {
            return this.present() + ', it is a ' + this.model;
        }
    }

    let myCar = new Model("Ford", "Mustang");
    document.getElementById("demo").innerHTML = myCar.show();

🛑 Class Static

✅ Static class methods are defined on the class itself.

✅ You cannot call a static method on an object, only on an object class.

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

⭕ JS Async

🛑 JS Calllbacks

✅ Using a callback, you could call the calculator function (myCalculator) with a callback (myCallback), 
    and let the calculator function run the callback after the calculation is finished

✅  The examples above are not very exciting.

    They are simplified to teach you the callback syntax.

    Where callbacks really shine are in asynchronous functions, where one function has to wait for another function (like waiting for a file to load). 

🛑 JS Asynchronous

✅ When using the JavaScript function setTimeout(), you can specify a callback function to be executed on time-out

✅ For displaying time:

    setInterval(myFunction, 1000);

    function myFunction() {
        let d = new Date();
        document.getElementById("demo").innerHTML=
        d.getHours() + ":" +
        d.getMinutes() + ":" +
        d.getSeconds();
    }

🛑 JS Promises

⭐ Doubts

🛑 JS Async/Await

✅ The keyword async before a function makes the function return a promise

✅ The await keyword can only be used inside an async function.

    The await keyword makes the function pause the execution and wait for a resolved promise before it continues

                let value = await promise;

✅ 


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

⭕ JS HTML DOM

🛑 DOM Intro

✅ When a web page is loaded, the browser creates a Document Object Model of the page.

✅ The HTML DOM is a standard object model and programming interface for HTML. It defines:

    The HTML elements as objects
    The properties of all HTML elements
    The methods to access all HTML elements
    The events for all HTML elements

🛑 DOM Methods

✅  HTML DOM methods are actions you can perform (on HTML Elements).

    HTML DOM properties are values (of HTML Elements) that you can set or change.

✅ getElementById method

✅ innerHTML property

🛑 DOM Documents

✅ Finding HTML Elements

    Method	                                            Description
    +--------------------------------------------------------------------------------------+
    document.getElementById(id)	                        Find an element by element id
    document.getElementsByTagName(name)	                Find elements by tag name
    document.getElementsByClassName(name)	            Find elements by class name

✅ Changing HTML Elements

    Property	                                        Description
    +-------------------------------------------------------------------------------------------------+
    element.innerHTML =  new html content	            Change the inner HTML of an element
    element.attribute = new value	                    Change the attribute value of an HTML element
    element.style.property = new style	                Change the style of an HTML element

    Method	                                            Description
    +----------------------------------------------------------------------------------------------------+
    element.setAttribute(attribute, value)	            Change the attribute value of an HTML element

✅ Adding and Deleting Elements

    Method	                                    Description
    +-------------------------------------------------------------------------------+
    document.createElement(element)	            Create an HTML element
    document.removeChild(element)	            Remove an HTML element
    document.appendChild(element)	            Add an HTML element
    document.replaceChild(new, old)	            Replace an HTML element
    document.write(text)	                    Write into the HTML output stream

✅ Adding Events Handlers

    Method	                                                                    Description
    +--------------------------------------------------------------------------------------------------------------------------+
    document.getElementById(id).onclick = function(){code}	                    Adding event handler code to an onclick event

🛑 DOM Elements

✅ getElementById("intro")

✅ getElementsByTagName("p")

✅ getElementsByClassName("intro")

✅ const x = document.querySelectorAll("p.intro");

🛑 DOM HTML

✅ Changing HTML Content

    Ex:

    document.getElementById(id).innerHTML = new HTML

✅ Changing the Value of an Attribute

    Ex:

    document.getElementById(id).attribute = new value

✅ document.write() can be used to write directly to the HTML output stream

🛑 DOM Forms

✅ HTML form validation can be done by JavaScript.

✅ Data Validation

    Data validation is the process of ensuring that user input is clean, correct, and useful.

✅ Constraint Validation HTML Input Attributes

    Attribute	                                                Description
    +----------------------------------------------------------------------------------------------------------+
    disabled	                                    Specifies that the input element should be disabled
    max	                                            Specifies the maximum value of an input element
    min	                                            Specifies the minimum value of an input element
    pattern	                                        Specifies the value pattern of an input element
    required	                                    Specifies that the input field requires an element
    type 	                                        Specifies the type of an input element

✅ Constraint Validation CSS Pseudo Selectors

    Selector	    Description
    +----------------------------------------------------------------------------+
    :disabled	    Selects input elements with the "disabled" attribute specified
    :invalid	    Selects input elements with invalid values
    :optional	    Selects input elements with no "required" attribute specified
    :required	    Selects input elements with the "required" attribute specified
    :valid	        Selects input elements with valid value

🛑 DOM CSS

✅ document.getElementById(id).style.property = new style

🛑 DOM Animation

🛑 DOM Event

✅ A JavaScript can be executed when an event occurs, like when a user clicks on an HTML element.

✅ The onload and onunload events are triggered when the user enters or leaves the page.
    The onload event can be used to check the visitor's browser type and browser version, and load the proper version of the web page based on the information.

✅ The onchange event is often used in combination with validation of input fields.

✅ onmouseover,onmouseout,onmousedown, onmouseup, and onclick

🛑 DOM Event Listener

✅ document.getElementById("myBtn").addEventListener("click", displayDate);

✅ removeEventListener()

✅ element.addEventListener(event, function, useCapture);

✅ element.removeEventListener("mousemove", myFunction);

🛑 DOM Navigation

✅  parentNode
    childNodes[nodenumber]
    firstChild
    lastChild
    nextSibling
    previousSibling

✅  document.body - The body of the document
    document.documentElement - The full document

✅ The nodeName property specifies the name of a node.

        nodeName is read-only
        nodeName of an element node is the same as the tag name
        nodeName of an attribute node is the attribute name
        nodeName of a text node is always #text
        nodeName of the document node is always #document

✅ The nodeValue property specifies the value of a node.

        nodeValue for element nodes is null
        nodeValue for text nodes is the text itself
        nodeValue for attribute nodes is the attribute value

🛑 DOM Nodes

✅ To add a new element to the HTML DOM, you must create the element (element node) first, and then append it to an existing element.

✅ const para = document.createElement("p");
    const node = document.createTextNode("This is new.");
    para.appendChild(node);

✅ remove()

✅ replaceChild()

🛑 DOM Collections

✅ The getElementsByTagName() method returns an HTMLCollection object.

        const myCollection = document.getElementsByTagName("p");

✅ The length property defines the number of elements in an HTMLCollection

🛑 DOM Node Lists

✅ A NodeList object is a list (collection) of nodes extracted from a document.

            const myNodeList = document.querySelectorAll("p");

✅ The length property defines the number of nodes in a node list

                const myNodelist = document.querySelectorAll("p");
                for (let i = 0; i < myNodelist.length; i++) {
                myNodelist[i].style.color = "red";
                }

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

⭕ JS Browser BOM

🛑 JS Window

✅ window.document.getElementById("header");
    
    is the same as:

    document.getElementById("header");

✅ Two properties can be used to determine the size of the browser window.

    Both properties return the sizes in pixels:

    window.innerHeight - the inner height of the browser window (in pixels)
    window.innerWidth - the inner width of the browser window (in pixels)

✅  window.open() - open a new window
    window.close() - close the current window
    window.moveTo() - move the current window
    window.resizeTo() - resize the current window

🛑 JS Screen

✅  screen.width
    screen.height
    screen.availWidth
    screen.availHeight
    screen.colorDepth
    screen.pixelDepth

🛑 JS Location

✅ The window.location object can be used to get the current page address (URL) and to redirect the browser to a new page.

✅ 
    window.location.href            returns the href (URL) of the current page
    window.location.hostname        returns the domain name of the web host
    window.location.pathname        returns the path and filename of the current page
    window.location.protocol        returns the web protocol used (http: or https:)
    window.location.assign()        loads a new document

🛑 JS History

✅  history.back() - same as clicking back in the browser
    history.forward() - same as clicking forward in the browser

🛑 JS Navigator (Left)

✅  navigator.cookieEnabled
    navigator.appCodeName
    navigator.platform

🛑 JS Popup Alert

✅ An alert box is often used if you want to make sure information comes through to the user.

    When an alert box pops up, the user will have to click "OK" to proceed.

                    window.alert("sometext");

✅ A confirm box is often used if you want the user to verify or accept something.

                window.confirm("sometext");

                example:

                if (confirm("Press a button!")) {
                txt = "You pressed OK!";
                } else {
                txt = "You pressed Cancel!";
                }

✅ A prompt box is often used if you want the user to input a value before entering a page.

            window.prompt("sometext","defaultText");

            Example:
                        let person = prompt("Please enter your name", "Harry Potter");
                        let text;
                        if (person == null || person == "") {
                        text = "User cancelled the prompt.";
                        } else {
                        text = "Hello " + person + "! How are you today?";
                        }

✅ To display line breaks inside a popup box, use a back-slash followed by the character n.

🛑 JS Timing

✅ setTimeout(function, milliseconds)

    Executes a function, after waiting a specified number of milliseconds.

✅ setInterval(function, milliseconds)

    Same as setTimeout(), but repeats the execution of the function continuously.

✅ The clearTimeout() method stops the execution of the function specified in setTimeout().

    Example:

    <button onclick="myVar = setTimeout(myFunction, 3000)">Try it</button>

    <button onclick="clearTimeout(myVar)">Stop it</button>

🛑 JS Cookies

✅ JavaScript can create, read, and delete cookies with the document.cookie property.

✅ document.cookie will return all cookies in one string much like: cookie1=value; cookie2=value; cookie3=value;

✅ setCookie("username", username, 365);

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

⭕ JS Web APIs

🛑 Web API Intro

✅ A Web API is a developer's dream.

            It can extend the functionality of the browser
            It can greatly simplify complex functions
            It can provide easy syntax to complex code

✅ API stands for Application Programming Interface.

    A Web API is an application programming interface for the Web.

    A Browser API can extend the functionality of a web browser.

    A Server API can extend the functionality of a web server.

✅ Third Party APIs

    Third party APIs are not built into your browser.

    To use these APIs, you will have to download the code from the Web.

                Examples:

                YouTube API - Allows you to display videos on a web site.
                Twitter API - Allows you to display Tweets on a web site.
                Facebook API - Allows you to display Facebook info on a web site.

🛑 Web Form API

✅ Constraint Validation DOM Properties
    
    Property	                            Description
    +-----------------------------------------------------------------------------------------------+
    validity	                            Contains boolean properties related to the validity of an input element.
    validationMessage	                    Contains the message a browser will display when the validity is false.
    willValidate	                        Indicates if an input element will be validated. 

✅ Validity Properties

    Property	                    Description
    +------------------------------------------------------------------------------------------------------------+
    customError	                    Set to true, if a custom validity message is set.
    patternMismatch	                Set to true, if an element's value does not match its pattern attribute.
    rangeOverflow	                Set to true, if an element's value is greater than its max attribute.
    rangeUnderflow	                Set to true, if an element's value is less than its min attribute.
    stepMismatch	                Set to true, if an element's value is invalid per its step attribute.
    tooLong	                        Set to true, if an element's value exceeds its maxLength attribute.
    typeMismatch	                Set to true, if an element's value is invalid per its type attribute.
    valueMissing	                Set to true, if an element (with a required attribute) has no value.
    valid	                        Set to true, if an element's value is valid.

🛑 Web History API

✅ The back() method loads the previous URL in the windows.history list.

✅ The go() method loads a specific URL from the history list.

✅ History Object Properties

    Property	        Description
    +------------------------------------------------------------------+
    length	            Returns the number of URLs in the history list

✅ History Object Methods

    Method	            Description
    +----------------------------------------------------+
    back()	            Loads the previous URL in the history list
    forward()	        Loads the next URL in the history list
    go()	            Loads a specific URL from the history list

🛑 Web Storage API

✅ The Web Storage API is a simple syntax for storing and retrieving data in the browser. It is very easy to use:

        Example:

        localStorage.setItem("name", "John Doe");
        localStorage.getItem("name");

✅ The localStorage Object

        The localStorage object provides access to a local storage for a particular Web Site. It allows you to store, read, add, modify, and delete data items for that domain.

        The data is stored with no expiration date, and will not be deleted when the browser is closed.

        The data will be available for days, weeks, and years.

✅ The localStorage.setItem() method stores a data item in a storage.

✅ The localStorage.getItem() method retrieves a data item from the storage.

✅ The sessionStorage Object

    The sessionStorage object is identical to the localStorage object.

    The difference is that the sessionStorage object stores data for one session.

    The data is deleted when the browser is closed.

                    Example
                    sessionStorage.getItem("name");

✅ Storage Object Properties and Methods

    Property/Method	                        Description
    +------------------------------------------------------------------------------------------------------------------+
    key(n)	                                Returns the name of the nth key in the storage
    length	                                Returns the number of data items stored in the Storage object
    getItem(keyname)	                    Returns the value of the specified key name
    setItem(keyname, value)	                Adds a key to the storage, or updates a key value (if it already exists)
    removeItem(keyname)	                    Removes that key from the storage
    clear()	                                Empty all key out of the storage

✅ Related Pages for Web Storage API

    Property	                    Description
    +-------------------------------------------------------------------------------------------------------------------+
    window.localStorage	            Allows to save key/value pairs in a web browser. Stores the data with no expiration date
    window.sessionStorage	        Allows to save key/value pairs in a web browser. Stores the data for one session                    

🛑 Web Worker API

✅ When executing scripts in an HTML page, the page becomes unresponsive until the script is finished.

    A web worker is a JavaScript that runs in the background, independently of other scripts, without affecting the performance of the page. 
    
    You can continue to do whatever you want: clicking, selecting things, etc., while the web worker runs in the background.

⭐ Steps:

    ✅ Check Web Worker Support

            if (typeof(Worker) !== "undefined") {
            // Yes! Web worker support!
            // Some code.....
            } else {
            // Sorry! No Web Worker support..
            }

    ✅ Create a Web Worker File

            let i = 0;

            function timedCount() {
            i ++;
            postMessage(i);
            setTimeout("timedCount()",500);
            }

            timedCount();

    ✅ Create a Web Worker Object

        w.onmessage = function(event){
            document.getElementById("result").innerHTML = event.data;
        };

    ✅ Terminate a Web Worker

            w.terminate();

    ✅  Reuse the Web Worker

🛑 Web Fetch API

✅ The Fetch API interface allows web browser to make HTTP requests to web servers.

✅  async function getText(file) {
        let myObject = await fetch(file);
        let myText = await myObject.text();
        myDisplay(myText);
    }

🛑 Web Geolocation API

✅ The HTML Geolocation API is used to get the geographical position of a user.

✅ Geolocation is most accurate for devices with GPS, like smartphones.

✅ The getCurrentPosition() method is used to return the user's position.

    The getCurrentPosition() method returns an object on success. The latitude, longitude and accuracy properties are always returned.


    Property	                Returns
    +--------------------------------------------------------------------------------------------------------+
    coords.latitude	            The latitude as a decimal number (always returned)
    coords.longitude	        The longitude as a decimal number (always returned)
    coords.accuracy	            The accuracy of position (always returned)
    coords.altitude	            The altitude in meters above the mean sea level (returned if available)
    coords.altitudeAccuracy	    The altitude accuracy of position (returned if available)
    coords.heading	            The heading as degrees clockwise from North (returned if available)
    coords.speed	            The speed in meters per second (returned if available)
    timestamp	                The date/time of the response (returned if available)

✅  watchPosition() - Returns the current position of the user and continues to return updated position as the user moves (like the GPS in a car).
    clearWatch() - Stops the watchPosition() method.

⭕ JS JSON

🛑 Intro

✅ JSON stands for JavaScript Object Notation

    JSON is a text format for storing and transporting data

    JSON is "self-describing" and easy to understand

✅ What is JSON?

    JSON stands for JavaScript Object Notation
    JSON is a lightweight data-interchange format
    JSON is plain text written in JavaScript object notation
    JSON is used to send data between computers
    JSON is language independent *

✅ JSON strings into JavaScript objects:

        JSON.parse()

✅ converting an object into a JSON string:

        JSON.stringify()

✅  You can receive pure text from a server and use it as a JavaScript object.

    You can send a JavaScript object to a server in pure text format.

    You can work with data as JavaScript objects, with no complicated parsing and translations.

✅ When storing data, the data has to be a certain format, and regardless of where you choose to store it, text is always one of the legal formats.

    JSON makes it possible to store JavaScript objects as text.

🛑 Syntax

✅ JSON data is written as name/value pairs (aka key/value pairs).

    A name/value pair consists of a field name (in double quotes), followed by a colon, followed by a value:

                Example
                "name":"John"
    ✔ NOTE: JSON names require double quotes.

✅ 
        ✔    JSON
            {"name":"John"}
            In JavaScript, keys can be strings, numbers, or identifier names:

        ✔    JavaScript
            {name:"John"}

✅ In JSON, values must be one of the following data types:

            a string
            a number
            an object
            an array
            a boolean
            null

✅ JSON Files

    The file type for JSON files is ".json"
    The MIME type for JSON text is "application/json"

🛑 JSON vs XML

✅ Both JSON and XML can be used to receive data from a web server.

✅  ✔ JSON doesn't use end tag
    ✔ JSON is shorter
    ✔ JSON is quicker to read and write
    ✔ JSON can use arrays
    ✔ The biggest difference is:

    ✔ XML has to be parsed with an XML parser. JSON can be parsed by a standard JavaScript function.

🛑 Data Types

✅ a string
    a number
    an object (JSON object)
    an array
    a boolean
    null

🛑 Parse

✅ Parse the data with JSON.parse(), and the data becomes a JavaScript object. 

✅ You should avoid using functions in JSON, the functions will lose their scope, and you would have to use eval() to convert them back into functions 

🛑 Stringify

✅

✅

✅

✅

🛑 Objects
🛑 Arrays
🛑 Server
🛑 PHP
🛑 HTML
🛑 JSONP
 
