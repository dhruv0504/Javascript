ðŸ›‘ Javascript Introduction

âœ… JavaScript Can Change HTML Content
    One of many JavaScript HTML methods is getElementById().

    The example below "finds" an HTML element (with id="demo"), and changes the element content (innerHTML) to "Hello JavaScript":

    Example:

    document.getElementById("demo").innerHTML = "Hello JavaScript";

âœ… JavaScript Can Change HTML Attribute Values

âœ… JavaScript Can Change HTML Styles (CSS).

âœ… JavaScript Can Hide HTML Elements

    Hiding HTML elements can be done by changing the display style:

    Example
    document.getElementById("demo").style.display = "none";

âœ… JavaScript Can Show HTML Elements

    Showing hidden HTML elements can also be done by changing the display style:

    Example
    document.getElementById("demo").style.display = "block";

ðŸ›‘ Where to write

1. <script>
2. <head>/<body>
3. extrenal file

    JavaScript files have the file extension .js.
    
    Example:
    <script src="myScript.js"></script>

âœ… JavaScript Functions and Events

    A JavaScript function is a block of JavaScript code, that can be executed when "called" for.

ðŸ›‘ JS Output

âœ… JavaScript Display Possibilities

    JavaScript can "display" data in different ways:

    1.Writing into an HTML element, using innerHTML.
    2.Writing into the HTML output using document.write().
    3.Writing into an alert box, using window.alert().
    4.Writing into the browser console, using console.log() 

âœ… Using document.write() after an HTML document is loaded, will delete all existing HTML

âœ… The document.write() method should only be used for testing.

âœ… For debugging purposes, you can call the console.log() method in the browser to display data. 

âœ… The only exception is that you can call the window.print() method in the browser to print the content of the current window.

ðŸ›‘ JS Statememts

âœ… Semicolons ;

    Semicolons separate JavaScript statements.

    Add a semicolon at the end of each executable statement:

    Examples
    let a, b, c;  // Declare 3 variables
    a = 5;        // Assign the value 5 to a
    b = 6;        // Assign the value 6 to b
    c = a + b;    // Assign the sum of a and b to c

âœ… JavaScript Line Length and Line Breaks

    For best readability, programmers often like to avoid code lines longer than 80 characters.

    If a JavaScript statement does not fit on one line, the best place to break it is after an operator:

    Example
    document.getElementById("demo").innerHTML =
    "Hello Dolly!";

âœ… JavaScript Keywords

    JavaScript statements often start with a keyword to identify the JavaScript action to be performed.

    Our Reserved Words Reference lists all JavaScript keywords.

    Here is a list of some of the keywords you will learn about in this tutorial:

    Keyword         Description
    
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

    var	            Declares a variable
    let	            Declares a block variable
    const	        Declares a block constant
    if	            Marks a block of statements to be executed on a condition
    switch	        Marks a block of statements to be executed in different cases
    for	            Marks a block of statements to be executed in a loop
    function	    Declares a function
    return	        Exits a function
    try	            Implements error handling to a block of statements

ðŸ›‘ JS Syntax

âœ… JavaScript Identifiers / Names
âœ… JavaScript is Case Sensitive
âœ… JavaScript and Camel Case

ðŸ›‘ JS Comments

âœ… //
âœ… /* */

ðŸ›‘ JS Variables

âœ… 4 Ways to Declare a JavaScript Variable:

    var
    let
    const
    Using nothing

ðŸ›‘ JS Let

âœ… Variables defined with let can not be redeclared.

âœ… These two keywords provide Block Scope in JavaScript.

    Variables declared inside a { } block cannot be accessed from outside the block:

    Example:

        {
        let x = 2;
        }
        // x can NOT be used here

âœ… Let Hoisting

    Variables defined with var are hoisted to the top and can be initialized at any time.

    Meaning: You can use the variable before it is declared:

    Example

        carName = "Volvo";
        var carName;

ðŸ›‘ JS Const

âœ… Block Scope

    Declaring a variable with const is similar to let when it comes to Block Scope.

    The x declared in the block, in this example, is not the same as the x declared outside the block:

    Example

        const x = 10;
        // Here x is 10

        {
        const x = 2;
        // Here x is 2
        }

        // Here x is 10

ðŸ›‘ JS Operator

âœ… Arithmatic + - * / %  ** -- ++  
âœ… Assignment = += -= *= /= %= **=
âœ… Comparison == === != !== > <  >= <= ?
âœ… Logical && || !
âœ… Type typeof instanceof
âœ… Bitwise & | ~ ^ << >> >>>

ðŸ›‘ JS Arithmatic

ðŸ›‘ JS Assignment

ðŸ›‘ JS Data Types

âœ… JavaScript has 8 Datatypes

    1. String
    2. Number
    3. Bigint
    4. Boolean
    5. Undefined
    6. Null
    7. Symbol
    8. Object

âœ… The Object Datatype

    The object data type can contain:

    1. An object
    2. An array
    3. A date

ðŸ›‘ JS Functions

âœ… A JavaScript function is defined with the function keyword, followed by a name, followed by parentheses ().

    Function names can contain letters, digits, underscores, and dollar signs (same rules as variables).

    The parentheses may include parameter names separated by commas:
        
                (parameter1, parameter2, ...)

    The code to be executed, by the function, is placed inside curly brackets: {}

                                function name(parameter1, parameter2, parameter3) {
                                // code to be executed
                                }

    Function parameters are listed inside the parentheses () in the function definition.

    Function arguments are the values received by the function when it is invoked.

    Inside the function, the arguments (the parameters) behave as local variables.

ðŸ›‘ JS Objects

âœ… Real Life Objects, Properties, and Methods:

    In real life, a car is an object.

    A car has properties like weight and color, and methods like start and stop

    All cars have the same properties, but the property values differ from car to car.

    All cars have the same methods, but the methods are performed at different times.

    Example:

                                const person = {
                                firstName: "John",
                                lastName: "Doe",
                                age: 50,
                                eyeColor: "blue"
                                };

âœ…  const person = {
        firstName: "John",
        lastName : "Doe",
        id       : 5566,
        fullName : function() {
            return this.firstName + " " + this.lastName;
        }
        };

âœ…  What is this?

    In JavaScript, the this keyword refers to an object.

    Which object depends on how this is being invoked (used or called).

    The this keyword refers to different objects depending on how it is used:

        In an object method, this refers to the object.
        Alone, this refers to the global object.
        In a function, this refers to the global object.
        In a function, in strict mode, this is undefined.
        In an event, this refers to the element that received the event.
        Methods like call(), apply(), and bind() can refer this to any object.
        Note
        this is not a variable. It is a keyword. You cannot change the value of this.

ðŸ›‘ JS Events

âœ… Example:
                    <button onclick="document.getElementById('demo').innerHTML = Date()">The time is?</button>

âœ… Common HTML Events
        
    Here is a list of some common HTML events:

        Event	            Description
        +---------------------------------------------------------------------+
        
        onchange	        An HTML element has been changed
        onclick	            The user clicks an HTML element
        onmouseover	        The user moves the mouse over an HTML element
        onmouseout	        The user moves the mouse away from an HTML element
        onkeydown	        The user pushes a keyboard key
        onload	            The browser has finished loading the page

ðŸ›‘ JS Strings

âœ… To find the length of a string, use the built-in length property 

âœ… Escape Character

    Because strings must be written within quotes, JavaScript will misunderstand this string:

    The backslash (\) escape character turns special characters into string characters:

    Code	    Result	        Description
    ------------------------------------------

    \'	        '	            Single quote
    \"	        "	            Double quote
    \\	        \	            Backslash

âœ… Six other escape sequences are valid in JavaScript:

    Code	    Result
    -------------------------------

    \b	        Backspace
    \f	        Form Feed
    \n	        New Line
    \r	        Carriage Return
    \t	        Horizontal Tabulator
    \v	        Vertical Tabulator

âœ… Comparing two JavaScript objects always returns false.

ðŸ›‘ JS Strings Methods

âœ…      String length
        String slice()
        String substring()
        String substr()
        String replace()
        String replaceAll()
        String toUpperCase()
        String toLowerCase()
        String concat()
        String trim()
        String trimStart()
        String trimEnd()
        String padStart()
        String padEnd()
        String charAt()
        String charCodeAt()
        String split()

âœ…      slice(start, end)
        substring(start, end)
        substr(start, length)
        replace("Microsoft", "W3Schools")

âœ… The trim() method removes whitespace from both sides of a string

    trimStart()
    trim()
    trimEnd()

âœ… padStart() and padEnd() to support padding at the beginning and at the end of a string

    Example:

        padStart(4,"0")
        padEnd(4,"0")

âœ… Extracting String Characters

    There are 3 methods for extracting string characters:

        charAt(position)
        charCodeAt(position) : The charCodeAt() method returns the unicode of the character at a specified index in a string
        Property access [ ]

âœ… A string can be converted to an array with the split() method

ðŸ›‘ JS Strings Search

âœ… JavaScript Search Methods
                                
                    String indexOf() : The indexOf() method returns the index of (position of) the first occurrence of a string in a string
                    String lastIndexOf() : The lastIndexOf() method returns the index of the last occurrence of a specified text in a string
                    String search() : The search() method searches a string for a string (or a regular expression) and returns the position of the match
                    String match() : The match() method returns an array containing the results of matching a string against a string (or a regular expression).
                    String matchAll() : The matchAll() method returns an iterator containing the results of matching a string against a string (or a regular expression).
                    String includes() : The includes() method returns true if a string contains a specified value.
                    String startsWith() : The startsWith() method returns true if a string begins with a specified value.
                    String endsWith() : The endsWith() method returns true if a string ends with a specified value.

ðŸ›‘ JS String Templates

âœ… ${ans}

ðŸ›‘ JS Numbers

âœ… JavaScript has only one type of number. Numbers can be written with or without decimals.

âœ… Integers (numbers without a period or exponent notation) are accurate up to 15 digits.

âœ… Infinity (or -Infinity) is the value JavaScript will return if you calculate a number outside the largest possible number.

âœ… JavaScript interprets numeric constants as hexadecimal if they are preceded by 0x.

ðŸ›‘ JS BigInt

âœ… BigInt is the second numeric data type in JavaScript (after Number).

    With BigInt the total number of supported data types in JavaScript is 8:

        1. String
        2. Number
        3. Bigint
        4. Boolean
        5. Undefined
        6. Null
        7. Symbol
        8. Object

âœ… The Number.isInteger() method returns true if the argument is an integer.

âœ… A safe integer is an integer that can be exactly represented as a double precision number.
    
    The Number.isSafeInteger() method returns true if the argument is a safe integer.

ðŸ›‘ JS Number Methods

âœ…  

    Method	            |    Description
+-----------------------|---------------------------------------------------------+
    toString()	        |    Returns a number as a string
    toExponential()	    |    Returns a number written in exponential notation
    toFixed()	        |    Returns a number written with a number of decimals
    toPrecision()	    |    Returns a number written with a specified length
    ValueOf()	        |    Returns a number as a number

âœ…  A safe integer is an integer that can be exactly represented as a double precision number.

    The Number.isSafeInteger() method returns true if the argument is a safe integer.

âœ… 
âœ…
âœ…
âœ…
âœ…
âœ…
âœ…
âœ…
âœ… 