â­• JS Tutorials

ðŸ›‘ Javascript Introduction

âœ… JavaScript Can Change HTML Content
    One of many JavaScript HTML methods is getElementById().

    The example below "finds" an HTML element (with id="demo"), and changes the element content (innerHTML) to "Hello JavaScript":

    Example:

    document.getElementById("demo").innerHTML = "Hello JavaScript";

âœ… JavaScript Can Change HTML Attribute Values

âœ… JavaScript Can Change HTML Styles (CSS).

âœ… JavaScript Can Hide HTML Elements

    Hiding HTML elements can be done by changing the display style:

    Example
    document.getElementById("demo").style.display = "none";

âœ… JavaScript Can Show HTML Elements

    Showing hidden HTML elements can also be done by changing the display style:

    Example
    document.getElementById("demo").style.display = "block";

ðŸ›‘ Where to write

1. <script>
2. <head>/<body>
3. extrenal file

    JavaScript files have the file extension .js.
    
    Example:
    <script src="myScript.js"></script>

âœ… JavaScript Functions and Events

    A JavaScript function is a block of JavaScript code, that can be executed when "called" for.

ðŸ›‘ JS Output

âœ… JavaScript Display Possibilities

    JavaScript can "display" data in different ways:

    1.Writing into an HTML element, using innerHTML.
    2.Writing into the HTML output using document.write().
    3.Writing into an alert box, using window.alert().
    4.Writing into the browser console, using console.log() 

âœ… Using document.write() after an HTML document is loaded, will delete all existing HTML

âœ… The document.write() method should only be used for testing.

âœ… For debugging purposes, you can call the console.log() method in the browser to display data. 

âœ… The only exception is that you can call the window.print() method in the browser to print the content of the current window.

ðŸ›‘ JS Statememts

âœ… Semicolons ;

    Semicolons separate JavaScript statements.

    Add a semicolon at the end of each executable statement:

    Examples
    let a, b, c;  // Declare 3 variables
    a = 5;        // Assign the value 5 to a
    b = 6;        // Assign the value 6 to b
    c = a + b;    // Assign the sum of a and b to c

âœ… JavaScript Line Length and Line Breaks

    For best readability, programmers often like to avoid code lines longer than 80 characters.

    If a JavaScript statement does not fit on one line, the best place to break it is after an operator:

    Example
    document.getElementById("demo").innerHTML =
    "Hello Dolly!";

âœ… JavaScript Keywords

    JavaScript statements often start with a keyword to identify the JavaScript action to be performed.

    Our Reserved Words Reference lists all JavaScript keywords.

    Here is a list of some of the keywords you will learn about in this tutorial:

    Keyword         Description
    
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

    var	            Declares a variable
    let	            Declares a block variable
    const	        Declares a block constant
    if	            Marks a block of statements to be executed on a condition
    switch	        Marks a block of statements to be executed in different cases
    for	            Marks a block of statements to be executed in a loop
    function	    Declares a function
    return	        Exits a function
    try	            Implements error handling to a block of statements

ðŸ›‘ JS Syntax

âœ… JavaScript Identifiers / Names
âœ… JavaScript is Case Sensitive
âœ… JavaScript and Camel Case

ðŸ›‘ JS Comments

âœ… //
âœ… /* */

ðŸ›‘ JS Variables

âœ… 4 Ways to Declare a JavaScript Variable:

    var
    let
    const
    Using nothing

ðŸ›‘ JS Let

âœ… Variables defined with let can not be redeclared.

âœ… These two keywords provide Block Scope in JavaScript.

    Variables declared inside a { } block cannot be accessed from outside the block:

    Example:

        {
        let x = 2;
        }
        // x can NOT be used here

âœ… Let Hoisting

    Variables defined with var are hoisted to the top and can be initialized at any time.

    Meaning: You can use the variable before it is declared:

    Example

        carName = "Volvo";
        var carName;

ðŸ›‘ JS Const

âœ… Block Scope

    Declaring a variable with const is similar to let when it comes to Block Scope.

    The x declared in the block, in this example, is not the same as the x declared outside the block:

    Example

        const x = 10;
        // Here x is 10

        {
        const x = 2;
        // Here x is 2
        }

        // Here x is 10

ðŸ›‘ JS Operator

âœ… Arithmatic + - * / %  ** -- ++  
âœ… Assignment = += -= *= /= %= **=
âœ… Comparison == === != !== > <  >= <= ?
âœ… Logical && || !
âœ… Type typeof instanceof
âœ… Bitwise & | ~ ^ << >> >>>

ðŸ›‘ JS Arithmatic

ðŸ›‘ JS Assignment

ðŸ›‘ JS Data Types

âœ… JavaScript has 8 Datatypes

    1. String
    2. Number
    3. Bigint
    4. Boolean
    5. Undefined
    6. Null
    7. Symbol
    8. Object

âœ… The Object Datatype

    The object data type can contain:

    1. An object
    2. An array
    3. A date

ðŸ›‘ JS Functions

âœ… A JavaScript function is defined with the function keyword, followed by a name, followed by parentheses ().

    Function names can contain letters, digits, underscores, and dollar signs (same rules as variables).

    The parentheses may include parameter names separated by commas:
        
                (parameter1, parameter2, ...)

    The code to be executed, by the function, is placed inside curly brackets: {}

                                function name(parameter1, parameter2, parameter3) {
                                // code to be executed
                                }

    Function parameters are listed inside the parentheses () in the function definition.

    Function arguments are the values received by the function when it is invoked.

    Inside the function, the arguments (the parameters) behave as local variables.

ðŸ›‘ JS Objects

âœ… Real Life Objects, Properties, and Methods:

    In real life, a car is an object.

    A car has properties like weight and color, and methods like start and stop

    All cars have the same properties, but the property values differ from car to car.

    All cars have the same methods, but the methods are performed at different times.

    Example:

                                const person = {
                                firstName: "John",
                                lastName: "Doe",
                                age: 50,
                                eyeColor: "blue"
                                };

âœ…  const person = {
        firstName: "John",
        lastName : "Doe",
        id       : 5566,
        fullName : function() {
            return this.firstName + " " + this.lastName;
        }
        };

âœ…  What is this?

    In JavaScript, the this keyword refers to an object.

    Which object depends on how this is being invoked (used or called).

    The this keyword refers to different objects depending on how it is used:

        In an object method, this refers to the object.
        Alone, this refers to the global object.
        In a function, this refers to the global object.
        In a function, in strict mode, this is undefined.
        In an event, this refers to the element that received the event.
        Methods like call(), apply(), and bind() can refer this to any object.
        Note
        this is not a variable. It is a keyword. You cannot change the value of this.

ðŸ›‘ JS Events

âœ… Example:
                    <button onclick="document.getElementById('demo').innerHTML = Date()">The time is?</button>

âœ… Common HTML Events
        
    Here is a list of some common HTML events:

        Event	            Description
        +---------------------------------------------------------------------+
        
        onchange	        An HTML element has been changed
        onclick	            The user clicks an HTML element
        onmouseover	        The user moves the mouse over an HTML element
        onmouseout	        The user moves the mouse away from an HTML element
        onkeydown	        The user pushes a keyboard key
        onload	            The browser has finished loading the page

ðŸ›‘ JS Strings

âœ… To find the length of a string, use the built-in length property 

âœ… Escape Character

    Because strings must be written within quotes, JavaScript will misunderstand this string:

    The backslash (\) escape character turns special characters into string characters:

    Code	    Result	        Description
    ------------------------------------------

    \'	        '	            Single quote
    \"	        "	            Double quote
    \\	        \	            Backslash

âœ… Six other escape sequences are valid in JavaScript:

    Code	    Result
    -------------------------------

    \b	        Backspace
    \f	        Form Feed
    \n	        New Line
    \r	        Carriage Return
    \t	        Horizontal Tabulator
    \v	        Vertical Tabulator

âœ… Comparing two JavaScript objects always returns false.

ðŸ›‘ JS Strings Methods

âœ…      String length
        String slice()
        String substring()
        String substr()
        String replace()
        String replaceAll()
        String toUpperCase()
        String toLowerCase()
        String concat()
        String trim()
        String trimStart()
        String trimEnd()
        String padStart()
        String padEnd()
        String charAt()
        String charCodeAt()
        String split()

âœ…      slice(start, end)
        substring(start, end)
        substr(start, length)
        replace("Microsoft", "W3Schools")

âœ… The trim() method removes whitespace from both sides of a string

    trimStart()
    trim()
    trimEnd()

âœ… padStart() and padEnd() to support padding at the beginning and at the end of a string

    Example:

        padStart(4,"0")
        padEnd(4,"0")

âœ… Extracting String Characters

    There are 3 methods for extracting string characters:

        charAt(position)
        charCodeAt(position) : The charCodeAt() method returns the unicode of the character at a specified index in a string
        Property access [ ]

âœ… A string can be converted to an array with the split() method

ðŸ›‘ JS Strings Search

âœ… JavaScript Search Methods
                                
                    String indexOf() : The indexOf() method returns the index of (position of) the first occurrence of a string in a string
                    String lastIndexOf() : The lastIndexOf() method returns the index of the last occurrence of a specified text in a string
                    String search() : The search() method searches a string for a string (or a regular expression) and returns the position of the match
                    String match() : The match() method returns an array containing the results of matching a string against a string (or a regular expression).
                    String matchAll() : The matchAll() method returns an iterator containing the results of matching a string against a string (or a regular expression).
                    String includes() : The includes() method returns true if a string contains a specified value.
                    String startsWith() : The startsWith() method returns true if a string begins with a specified value.
                    String endsWith() : The endsWith() method returns true if a string ends with a specified value.

ðŸ›‘ JS String Templates

âœ… ${ans}

ðŸ›‘ JS Numbers

âœ… JavaScript has only one type of number. Numbers can be written with or without decimals.

âœ… Integers (numbers without a period or exponent notation) are accurate up to 15 digits.

âœ… Infinity (or -Infinity) is the value JavaScript will return if you calculate a number outside the largest possible number.

âœ… JavaScript interprets numeric constants as hexadecimal if they are preceded by 0x.

ðŸ›‘ JS BigInt

âœ… BigInt is the second numeric data type in JavaScript (after Number).

    With BigInt the total number of supported data types in JavaScript is 8:

        1. String
        2. Number
        3. Bigint
        4. Boolean
        5. Undefined
        6. Null
        7. Symbol
        8. Object

âœ… The Number.isInteger() method returns true if the argument is an integer.

âœ… A safe integer is an integer that can be exactly represented as a double precision number.
    
    The Number.isSafeInteger() method returns true if the argument is a safe integer.

ðŸ›‘ JS Number Methods

âœ…  

    Method	            |    Description
+-----------------------|---------------------------------------------------------+
    toString()	        |    Returns a number as a string
    toExponential()	    |    Returns a number written in exponential notation
    toFixed()	        |    Returns a number written with a number of decimals
    toPrecision()	    |    Returns a number written with a specified length
    ValueOf()	        |    Returns a number as a number

âœ…  A safe integer is an integer that can be exactly represented as a double precision number.

    The Number.isSafeInteger() method returns true if the argument is a safe integer.

ðŸ›‘ JS Number Properties

âœ…

Property	            Description
+----------------------------------------------------------------------------------------+
EPSILON	                The difference between 1 and the smallest number > 1.
MAX_VALUE	            The largest number possible in JavaScript
MIN_VALUE	            The smallest number possible in JavaScript
MAX_SAFE_INTEGER	    The maximum safe integer (253 - 1)
MIN_SAFE_INTEGER	    The minimum safe integer -(253 - 1)
POSITIVE_INFINITY	    Infinity (returned on overflow)
NEGATIVE_INFINITY	    Negative infinity (returned on overflow)
NaN	                    A "Not-a-Number" value

ðŸ›‘ JS Arrays

âœ… An array is a special variable, which can hold more than one value:

            const cars = ["Saab", "Volvo", "BMW"];

âœ… It is a common practice to declare arrays with the const keyword.

âœ… const cars = new Array("Saab", "Volvo", "BMW");

âœ… Array Methods

    1. length
    2. sort

âœ… The Difference Between Arrays and Objects

            In JavaScript, arrays use numbered indexes.  

            In JavaScript, objects use named indexes.

âœ… Array.isArray()

âœ… instanceof

ðŸ›‘ JavaScript Array Methods

âœ… The JavaScript method toString() converts an array to a string of (comma separated) array values.

âœ… pop()

âœ… push()

âœ… The shift() method removes the first array element and "shifts" all other elements to a lower index.

âœ… The unshift() method adds a new element to an array (at the beginning), and "unshifts" older elements

    The unshift() method returns the new array length

âœ… Using delete leaves undefined holes in the array.

âœ… The concat() method creates a new array by merging (concatenating) existing arrays

    The concat() method can also take strings as arguments

âœ… Flattening an array is the process of reducing the dimensionality of an array.

    The flat() method creates a new array with sub-array elements concatenated to a specified depth.

âœ… The splice() method adds new items to an array.

    The slice() method slices out a piece of an array.

âœ… The splice() method can be used to add new items to an array:

            Example:

            const fruits = ["Banana", "Orange", "Apple", "Mango"];
            fruits.splice(2, 0, "Lemon", "Kiwi");
        
                            The first parameter (2) defines the position where new elements should be added (spliced in).

                            The second parameter (0) defines how many elements should be removed.

                            The rest of the parameters ("Lemon" , "Kiwi") define the new elements to be added.

                            The splice() method returns an array with the deleted items.

ðŸ›‘ JS Array Sort

âœ… The sort() method sorts an array alphabetically 

âœ… The reverse() method reverses the elements in an array.

ðŸ›‘ JS Array Iteration   

âœ… The forEach() method calls a function (a callback function) once for each array element.

âœ… JavaScript Array map()

        The map() method creates a new array by performing a function on each array element.

        The map() method does not execute the function for array elements without values.

        The map() method does not change the original array.

âœ… JavaScript Array flatMap()

        ES2019 added the Array flatMap() method to JavaScript.

        The flatMap() method first maps all elements of an array and then creates a new array by flattening the array.

        Example:

            const myArr = [1, 2, 3, 4, 5, 6];
            const newArr = myArr.flatMap((x) => x * 2);

âœ… The filter() method creates a new array with array elements that pass a test.

âœ… JavaScript Array reduce()

        The reduce() method runs a function on each array element to produce (reduce it to) a single value.

        The reduce() method works from left-to-right in the array. See also reduceRight().

        The reduce() method does not reduce the original array.

        This example finds the sum of all numbers in an array:

        Example:

                    const numbers = [45, 4, 9, 16, 25];
                    let sum = numbers.reduce(myFunction);

                    function myFunction(total, value, index, array) {
                    return total + value;
                    }

âœ… JavaScript Array every()
    
    The every() method checks if all array values pass a test.

âœ… JavaScript Array some()

    The some() method checks if some array values pass a test.

    This example checks if some array values are larger than 18

âœ… JavaScript Array indexOf()

    The indexOf() method searches an array for an element value and returns its position.

    array.indexOf(item, start)

âœ… The find() method returns the value of the first array element that passes a test function.

âœ… The findIndex() method returns the index of the first array element that passes a test function.

âœ… The Array.keys() method returns an Array Iterator object with the keys of an array.

âœ… The entries() method returns an Array Iterator object with key/value pairs:

        [0, "Banana"]
        [1, "Orange"]
        [2, "Apple"]
        [3, "Mango"]

        The entries() method does not change the original array.

âœ… Array.includes() to arrays. This allows us to check if an element is present in an array (including NaN, unlike indexOf).

ðŸ›‘ JS Array Const   

âœ… An array declared with const cannot be reassigned

ðŸ›‘ JS Date

âœ… There are 9 ways to create a new date object:

    new Date()
    new Date(date string)

    new Date(year,month)
    new Date(year,month,day)
    new Date(year,month,day,hours)
    new Date(year,month,day,hours,minutes)
    new Date(year,month,day,hours,minutes,seconds)
    new Date(year,month,day,hours,minutes,seconds,ms)

    new Date(milliseconds)

ðŸ›‘ JS Date Formats


ðŸ›‘ JS Date Get Methods

âœ…  Method	                               Description
    +-------------------------------------------------------------------------------+
    getFullYear()	            Get year as a four digit number (yyyy)
    getMonth()	                Get month as a number (0-11)
    getDate()	                Get day as a number (1-31)
    getDay()	                Get weekday as a number (0-6)
    getHours()	                Get hour (0-23)
    getMinutes()	            Get minute (0-59)
    getSeconds()	            Get second (0-59)
    getMilliseconds()	        Get millisecond (0-999)
    getTime()	                Get time (milliseconds since January 1, 1970)

ðŸ›‘ JS Date Set Methods

âœ… Method	                                    Description
    +---------------------------------------------------------------------------------------+
    setDate()	                    Set the day as a number (1-31)
    setFullYear()	                Set the year (optionally month and day)
    setHours()	                    Set the hour (0-23)
    setMilliseconds()	            Set the milliseconds (0-999)
    setMinutes()	                Set the minutes (0-59)
    setMonth()	                    Set the month (0-11)
    setSeconds()	                Set the seconds (0-59)
    setTime()	                    Set the time (milliseconds since January 1, 1970)

ðŸ›‘ JS Math

âœ… 

    Math.E        // returns Euler's number
    Math.PI       // returns PI
    Math.SQRT2    // returns the square root of 2
    Math.SQRT1_2  // returns the square root of 1/2
    Math.LN2      // returns the natural logarithm of 2
    Math.LN10     // returns the natural logarithm of 10
    Math.LOG2E    // returns base 2 logarithm of E
    Math.LOG10E   // returns base 10 logarithm of E

âœ…

    Math.round(x)	Returns x rounded to its nearest integer
    Math.ceil(x)	Returns x rounded up to its nearest integer
    Math.floor(x)	Returns x rounded down to its nearest integer
    Math.trunc(x)	Returns the integer part of x (new in ES6)

âœ… Math.sign(x) returns if x is negative, null or positive

âœ… Math.pow(x, y) returns the value of x to the power of y

âœ… Math.random() returns a random number between 0 (inclusive), and 1 (exclusive)

âœ…   Method	                        Description
    +------------------------------------------------------------------------------------------------------+
    abs(x)	            Returns the absolute value of x
    acos(x)	            Returns the arccosine of x, in radians
    acosh(x)	        Returns the hyperbolic arccosine of x
    asin(x)	            Returns the arcsine of x, in radians
    asinh(x)	        Returns the hyperbolic arcsine of x
    atan(x)	            Returns the arctangent of x as a numeric value between -PI/2 and PI/2 radians
    atan2(y, x)	        Returns the arctangent of the quotient of its arguments
    atanh(x)	        Returns the hyperbolic arctangent of x
    cbrt(x)	            Returns the cubic root of x
    ceil(x)	            Returns x, rounded upwards to the nearest integer
    cos(x)	            Returns the cosine of x (x is in radians)
    cosh(x)	            Returns the hyperbolic cosine of x
    exp(x)	            Returns the value of Ex
    floor(x)	        Returns x, rounded downwards to the nearest integer
    log(x)	                    Returns the natural logarithm (base E) of x
    max(x, y, z, ..., n)	    Returns the number with the highest value
    min(x, y, z, ..., n)	    Returns the number with the lowest value
    pow(x, y)	                Returns the value of x to the power of y
    random()	                Returns a random number between 0 and 1
    round(x)	                Rounds x to the nearest integer
    sign(x)	                    Returns if x is negative, null or positive (-1, 0, 1)
    sin(x)	                    Returns the sine of x (x is in radians)
    sinh(x)	                    Returns the hyperbolic sine of x
    sqrt(x)	                    Returns the square root of x
    tan(x)	                    Returns the tangent of an angle
    tanh(x)	                    Returns the hyperbolic tangent of a number
    trunc(x)	                Returns the integer part of a number (x)

ðŸ›‘ JS Random

ðŸ›‘ JS Booleans

ðŸ›‘ JS Comparisions

ðŸ›‘ JS If Else

    if (condition1) {
    //  block of code to be executed if condition1 is true
    } else if (condition2) {
    //  block of code to be executed if the condition1 is false and condition2 is true
    } else {
    //  block of code to be executed if the condition1 is false and condition2 is false
    }

ðŸ›‘ JS Switch

    switch(expression) {
    case x:
        // code block
        break;
    case y:
        // code block
        break;
    default:
        // code block
    }

ðŸ›‘ JS Loop For

    for (let i = 0; i < 5; i++) {
        text += "The number is " + i + "<br>";
    }

ðŸ›‘ JS For In

âœ…  for (key in object) {
            // code block to be executed
    }

âœ… The forEach() method calls a function (a callback function) once for each array element.

ðŸ›‘ JS For Of

âœ… The JavaScript for of statement loops through the values of an iterable object.

âœ…          for (variable of iterable) {
                // code block to be executed
            }

ðŸ›‘ JS Loop While

âœ… while (condition) {
    // code block to be executed
    }

âœ… do {
    // code block to be executed
    }
    while (condition);

ðŸ›‘ JS Break

âœ… The break statement "jumps out" of a loop.

âœ… The continue statement breaks one iteration (in the loop), if a specified condition occurs, and continues with the next iteration in the loop.

ðŸ›‘ JS Iterables

âœ…  Iterables are iterable objects (like Arrays).

    Iterables can be accessed with simple and efficient code.

    Iterables can be iterated over with for..of loops

ðŸ›‘ JS Set

âœ…
    Method	            Description

    +-------------------------------------------------------------------------------------+
    new Set()	        Creates a new Set
    add()	            Adds a new element to the Set
    delete()	        Removes an element from a Set
    has()	            Returns true if a value exists in the Set
    forEach()	        Invokes a callback for each element in the Set
    values()	        Returns an iterator with all the values in a Set

âœ…
    Property	        Description
    +---------------------------------------------------------------------+
    size	            Returns the number of elements in a Set

ðŸ›‘ JS Maps

âœ…  Method                  Description
    +-------------------------------------------------------------------------------------+
    new Map()	            Creates a new Map
    set()	                Sets the value for a key in a Map
    get()	                Gets the value for a key in a Map
    delete()	            Removes a Map element specified by the key
    has()	                Returns true if a key exists in a Map
    forEach()	            Calls a function for each key/value pair in a Map
    entries()	            Returns an iterator with the [key, value] pairs in a Map
    
âœ…    
    Property	            Description
    +--------------------------------------------------------------------+
    size	                Returns the number of elements in a Map

ðŸ›‘ JS typeof

ðŸ›‘ JS Type Conversion

âœ…
    Method	                    Description
    +-------------------------------------------------------------------------+
    
    Number()	                Returns a number, converted from its argument
    parseFloat()	            Parses a string and returns a floating point number
    parseInt()	                Parses a string and returns an integer
    toExponential()	            Returns a string, with a number rounded and written using exponential notation.
    toFixed()	                Returns a string, with a number rounded and written with a specified number of decimals.
    toPrecision()	            Returns a string, with a number written with a specified length

ðŸ›‘ JS Bitwise

âœ…
    Operator	        Name	                            Description
    +-------------------------------------------------------------------------------------------------------------------------------------------------------------+

    &	                AND	                                Sets each bit to 1 if both bits are 1
    |	                OR	                                Sets each bit to 1 if one of two bits is 1
    ^	                XOR	                                Sets each bit to 1 if only one of two bits is 1
    ~	                NOT	                                Inverts all the bits
    <<	                Zero fill left shift	            Shifts left by pushing zeros in from the right and let the leftmost bits fall off
    >>	                Signed right shift	                Shifts right by pushing copies of the leftmost bit in from the left, and let the rightmost bits fall off
    >>>	                Zero fill right shift	            Shifts right by pushing zeros in from the left, and let the rightmost bits fall off

ðŸ›‘ JS RegExp

ðŸ›‘ JS Precedence

ðŸ›‘ JS Error

âœ…  try {
            adddlert("Welcome guest!");
    }
    catch(err) {
            document.getElementById("demo").innerHTML = err.message;
    }

âœ…  throw "Too big";

âœ… 
    try {
    Block of code to try
    }
    catch(err) {
    Block of code to handle errors
    }
    finally {
    Block of code to be executed regardless of the try / catch result
    }

ðŸ›‘ JS Scope

ðŸ›‘ JS Hoisting

ðŸ›‘ JS Strict Mode

ðŸ›‘ JS this Keyword

ðŸ›‘ JS Arrow Function

âœ…  let myFunction = (a, b) => a * b;

âœ…  hello = () => {
        return "Hello World!";
    }

âœ…  hello = () => "Hello World!";   
    
âœ…  hello = (val) => "Hello " + val;



ðŸ›‘ JS Class

âœ…  class ClassName {
        constructor() { ... }
        method_1() { ... }
        method_2() { ... }
        method_3() { ... }
    }

ðŸ›‘ JS JSON

âœ…  "employees":[
        {"firstName":"John", "lastName":"Doe"},
        {"firstName":"Anna", "lastName":"Smith"},
        {"firstName":"Peter", "lastName":"Jones"}
    ]

ðŸ›‘ JS Debugging

ðŸ›‘ JS Style Guide

ðŸ›‘ JS Best Practices

ðŸ›‘ JS Mistakes

ðŸ›‘ JS Performance

âœ… Reduce DOM Access
        
        Accessing the HTML DOM is very slow, compared to other JavaScript statements.

        If you expect to access a DOM element several times, access it once, and use it as a local variable:

                                Example:

                                const obj = document.getElementById("demo");
                                obj.innerHTML = "Hello";

ðŸ›‘ JS Reserved Words

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

â­• JS Versions

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

â­• JS Objects

ðŸ›‘ Object Definition

âœ… Methods are actions that can be performed on objects.

âœ… The named values, in JavaScript objects, are called properties.

ðŸ›‘ Object Ppt:

âœ…  objectName.property  
    objectName["property"] 
    objectName[expression]   

âœ… delete person.age; // for deleting

âœ… person.nationality = "English"; // to add properties

ðŸ›‘ Object Methods:

âœ… const person = {
        firstName: "John",
        lastName: "Doe",
        id: 5566,
        fullName: function() {
            return this.firstName + " " + this.lastName;
        }
    };

ðŸ›‘ Object Display:

âœ… Object.values(person);

âœ… JSON.stringify(person)
    
    O/p: {"name":"John","age":30,"city":"New York"}

âœ… JSON.stringify will not stringify functions

ðŸ›‘ Object Accessors:

âœ… Object.defineProperty(obj, "reset", {
        get : function () {this.counter = 0;}
    });

ðŸ›‘ Object Constructor:

âœ… function Person(first, last, age, eye) {
        this.firstName = first;
        this.lastName = last;
        this.age = age;
        this.eyeColor = eye;
    } 

ðŸ›‘ Object Prototype:

âœ… The JavaScript prototype property also allows you to add new methods to objects constructors

    Example:

    Person.prototype.name = function() {
        return this.firstName + " " + this.lastName;
    };

ðŸ›‘ Object Iterables:

âœ…  

âœ…

âœ…

âœ…

âœ…

âœ…

âœ…

ðŸ›‘
ðŸ›‘
ðŸ›‘

ðŸ›‘

ðŸ›‘
ðŸ›‘
ðŸ›‘
ðŸ›‘
ðŸ›‘

